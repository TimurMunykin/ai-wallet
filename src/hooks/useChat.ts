import { useState, useRef, useEffect } from 'react';
import { financeChatService } from '../services/financeChatService';
import type { ChatMessage } from '../types/chat';
import toast from 'react-hot-toast';

export const useChat = () => {
  const [messages, setMessages] = useState<ChatMessage[]>([
    {
      id: '1',
      content: `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫.

–ü–æ–º–æ–≥—É –≤–∞–º:
üí∞ –í–µ—Å—Ç–∏ —É—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
üìÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
üìà –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
üí° –°–æ–∑–¥–∞–≤–∞—Ç—å –±—é–¥–∂–µ—Ç—ã –∏ –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ:
‚Ä¢ "–ü–æ—Ç—Ä–∞—Ç–∏–ª 500 —Ä—É–±–ª–µ–π –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã"
‚Ä¢ "–ó–∞—Ä–∞–±–æ—Ç–∞–ª 3000 —Ä—É–±–ª–µ–π —Ñ—Ä–∏–ª–∞–Ω—Å–æ–º"
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –º–æ–π –±–∞–ª–∞–Ω—Å"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ —Ç—Ä–∞—á—É –Ω–∞ –µ–¥—É –≤ –º–µ—Å—è—Ü?"
‚Ä¢ "–î–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å–∫—É Spotify 299‚ÇΩ –≤ –º–µ—Å—è—Ü"

–ù–∞—á–Ω–µ–º? üöÄ`,
      isUser: false,
      timestamp: new Date()
    }
  ]);

  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const sendMessage = async (message: string) => {
    if (!message.trim() || isLoading) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      content: message,
      isUser: true,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);

    try {
      const response = await financeChatService.sendMessage(message);

      const assistantMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        content: response.message,
        isUser: false,
        timestamp: new Date(),
        uiSnippet: response.uiSnippet,
      };

      setMessages(prev => [...prev, assistantMessage]);

      if (response.hasUISnippet) {
        toast.success('–í–∏–¥–∂–µ—Ç —Å–æ–∑–¥–∞–Ω! üéâ');
      }
    } catch (error) {
      console.error('Error sending message:', error);
      toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');

      const errorMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.',
        isUser: false,
        timestamp: new Date(),
      };

      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const clearHistory = () => {
    setMessages([messages[0]]); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    financeChatService.clearHistory();
    toast.success('–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞');
  };

  const addQuickAction = (action: string) => {
    setInputValue(action);
  };

  return {
    messages,
    inputValue,
    setInputValue,
    isLoading,
    messagesEndRef,
    sendMessage,
    clearHistory,
    addQuickAction,
  };
};
